---
import type { CollectionEntry, Heading } from "astro:content";
import { getCollection } from "astro:content";

import { PostClick } from "@myriaddreamin/tylant";
import TagList from "$components/TagList.astro";

import BaseHead from "$components/BaseHead.astro";
import Header from "$components/Header.astro";
import Footer from "$components/Footer.astro";
import FormattedDate from "$components/FormattedDate.astro";
import TranslationLink from "$components/TranslationLink.astro";
import Comments from "$components/Comments.astro";
import { kEnableClick, kArticleStats, kEnableReaction } from "$consts";

interface Props extends CollectionEntry<'blog'>['data'] {
  id: CollectionEntry<'blog'>['id'];
  slug: CollectionEntry<'blog'>['slug'];
  headings: Heading[];
  translationUrl?: string;
  translationKey: string;
}

const {
  id,
  title,
  description,
  date,
  updatedDate,
  tags,
  author,
  lang,
  translationUrl,
  'llm-translated': llmTranslated,
  translationKey,
  headings
} = Astro.props;
const postSlug = Astro.url.pathname;

// Use frontmatter language as primary source, fallback to URL detection
const currentLang = lang || (Astro.url.pathname.startsWith('/zh/') ? 'zh' : 'en');

const stat: { like?: number; click?: number } =
  ((kEnableClick || kEnableReaction) &&
    kArticleStats.find((stat) => stat.id === id)) ||
  {};
const click = stat.click || 0;
const like = stat.like || 0;
const pdfArchives = await getCollection("archive");
---

<html lang={currentLang}>
  <head>
    <BaseHead title={title} description={description} />
    <meta name="translation-key" content={translationKey || ""} />
    <style is:global>
      main {
        width: calc(100% - 2em);
        max-width: 100%;
        margin: 0;
      }
      .prose,
      .comment-region,
      ul.tags {
        max-width: min(56rem, calc(100% - 2em));
        color: var(--main-color);
        margin: auto;
      }
      .prose {
        padding: 1em;
      }
      .prose p {
        margin-block-start: 0.5em;
        margin-block-end: 0.5em;
      }
      .title {
        margin-bottom: 1em;
        padding: 1em 0;
        line-height: 1;
      }
      .outline {
        margin-top: -2em;
      }
      .outline + hr {
        margin-bottom: 1em;
      }
      .title h1 {
        margin: 0 0 0.5em 0;
      }
      .annotation {
        color: var(--gray-color);
        display: flex;
        gap: 0.5em;
        margin-bottom: 0.5em;
      }
      .last-updated-on,
      .click-count,
      .like-count {
        font-style: italic;
      }
      ul.tags {
        list-style: none;
        padding: 0;
      }
      .tags li {
        display: inline-block;
        margin: 0;
        margin-right: 1em;
      }
      .tags a {
        text-decoration: none;
      }
      .tags a:hover {
        text-decoration: underline;
      }
      .outline {
        text-align: left;
      }

      .outline-item {
        line-height: 1.8889;
      }
      .outline-item.x-heading-1 {
        margin-left: 0em;
      }
      .outline-item.x-heading-2 {
        margin-left: 1em;
      }
      .outline-item.x-heading-3 {
        margin-left: 2em;
      }
      .outline-item.x-heading-4 {
        margin-left: 3em;
      }
      .outline-item.x-heading-5 {
        margin-left: 4em;
      }
    </style>
    {id && kEnableClick && <PostClick id={id} />}
  </head>

  <body>
    <Header articleId={id || undefined} />
    <main>
      <article>
        <div class="prose">
          <section class="title" aria-label="Title">
            <div class="annotation">
              <div class="date">
                <FormattedDate date={date} />
                {
                  updatedDate && (
                    <>
                      <span class="last-updated-on">
                        , Last updated on{" "}
                        <FormattedDate date={updatedDate || date} />
                      </span>
                    </>
                  )
                }
              </div>
              {
                id && kEnableClick && (
                  <>
                    <span>·</span>
                    <div class="click-count">
                      {click} {click === 1 ? "view" : "views"}
                    </div>
                  </>
                )
              }
              {
                id && kEnableReaction && (
                  <>
                    <span>·</span>
                    <span class="like-count">
                      {like} {like === 1 ? "like" : "likes"}
                    </span>
                  </>
                )
              }
            </div>
            <h1>{title}</h1>
            <TranslationLink
              entry={Astro.props}
              locale={currentLang}
              llmTranslated={llmTranslated}
            />
            <hr />
          </section>
          <slot />
        </div>
      </article>
      {tags && <TagList tags={tags} lang={lang || currentLang}/>}
      <div class="comment-region">
        <Comments 
          owner="pxwg" 
          repo="blog" 
          title="Welcome to blog Discussions!"
        />
      </div>
    </main>
    <Footer />
  </body>
</html>
