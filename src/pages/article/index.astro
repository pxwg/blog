---
import { getCollection } from "astro:content";

import { TagList } from "@myriaddreamin/tylant";
import { Search } from "@myriaddreamin/tylant";

import BaseHead from "$components/BaseHead.astro";
import Footer from "$components/Footer.astro";
import FormattedDate from "$components/FormattedDate.astro";
import Header from "$components/Header.astro";

import { kUrlBase, kSiteTitle, kSiteDescription, kEnableSearch } from "$consts";

import "$styles/IndexPostList.css";
import { getLanguageFromUrl, filterPostsByLanguage, getCurrentLanguage } from "$utils/languageFilter";

const allPosts = (await getCollection("blog")).sort(
  (a, b) => b.data.date.valueOf() - a.data.date.valueOf()
);

// In static mode, render all posts and filter on client side
const posts = allPosts;

// Determine current language from URL for initial rendering
const currentLanguage = getLanguageFromUrl(Astro.url);

// Debug information
const debugInfo = {
  totalPosts: allPosts.length,
  astroUrlSearch: Astro.url.search,
  astroFullUrl: Astro.url.href,
  astroSearchParams: Object.fromEntries(Astro.url.searchParams.entries())
};
---

<!doctype html>
<html lang={currentLanguage}>
  <head>
    <BaseHead title={kSiteTitle} description={kSiteDescription} />
    
    <!-- Early language detection to prevent flickering and set html lang attribute -->
    <script is:inline>
      (function() {
        // Immediate language detection to prevent flickering
        function getStoredLanguage() {
          try {
            const stored = localStorage.getItem('preferredLanguage');
            return (stored === 'en' || stored === 'zh') ? stored : null;
          } catch (e) {
            return null;
          }
        }
        
        function getCurrentUrlLanguage() {
          const urlParams = new URLSearchParams(window.location.search);
          const langParam = urlParams.get('lang');
          if (langParam === 'en') return 'en';
          
          const path = window.location.pathname;
          if (path.match(/\/article\/en\/[^\/]+\/?$/)) return 'en';
          if (path.match(/\/article\/zh\/[^\/]+\/?$/)) return 'zh';
          
          return 'zh';
        }
        
        // Update html lang attribute immediately
        const detectedLang = getStoredLanguage() || getCurrentUrlLanguage();
        document.documentElement.lang = detectedLang;
        
        function needsRedirect(storedLang, currentUrlLang) {
          if (!storedLang) return false;
          
          const currentPath = window.location.pathname;
          const articleMatch = currentPath.match(/^\/article\/(.+?)\/?$/);
          
          if (articleMatch) {
            const articlePath = articleMatch[1];
            
            if (storedLang === 'en' && !articlePath.startsWith('en/')) {
              return true;
            }
            
            if (storedLang === 'zh' && !articlePath.startsWith('zh/')) {
              return true;
            }
            
            return false;
          } else {
            const hasEnParam = window.location.search.includes('lang=en');
            
            if (storedLang === 'en' && !hasEnParam) {
              return true;
            }
            
            if (storedLang === 'zh' && hasEnParam) {
              return true;
            }
            
            return false;
          }
        }
        
        // Check if we need to redirect immediately
        const storedLang = getStoredLanguage();
        const currentUrlLang = getCurrentUrlLanguage();
        
        if (storedLang && needsRedirect(storedLang, currentUrlLang)) {
          // Hide content to prevent flash during redirect
          document.documentElement.style.visibility = 'hidden';
          
          // Show content after a short delay if redirect doesn't happen
          setTimeout(function() {
            document.documentElement.style.visibility = 'visible';
          }, 100);
        }
        
        // Make immediate language available globally
        window.immediateLanguage = storedLang || currentUrlLang;
      })();
    </script>
    <style>
      .posts.loading {
        display: none;
      }
      main.search-enabled {
        padding-top: 0;
      }
      /*  */
      @media (max-width: 600px) {
        .heading {
          display: flex;
          flex-direction: column;
        }
      }
    </style>
  </head>
  <body>
    <Header />
    {kEnableSearch && <Search />}
    <main class={kEnableSearch ? "search-enabled" : ""}>
      <section>
        <h2 style="margin-bottom: 1rem; font-size: 2rem;" id="all-posts-title">
          <span class="en-text" style="display: none;">All Posts</span>
          <span class="zh-text" style="display: none;">全部文章</span>
        </h2>
        <ul class={`accent block-list posts${kEnableSearch ? " loading" : ""}`} id="all-posts-list">
          {
            posts.map((post) => (
              <li
                data-article-id={post.id}
                data-article-meta={JSON.stringify(post.data)}
                data-post-id={post.id}
                data-post-data={JSON.stringify(post.data)}
              >
                <a class="heading" href={`${kUrlBase}/article/${post.id}/`}>
                  <h2>
                    <span class="title">{post.data.title}</span>
                  </h2>
                  <span class="date">
                    <FormattedDate date={post.data.date} />
                  </span>
                </a>
                {post.data.tags && <TagList tags={post.data.tags} />}
                {post.data.description || ""}
              </li>
            ))
          }
        </ul>
        <script is:inline>
          if (!window.location.search) {
            document.querySelector(".posts").classList.remove("loading");
          }
        </script>
        
        <!-- Client-side language filtering for All Posts with global state support -->
        <script is:inline define:vars={{allPosts}}>
          // Import global language state
          let globalLanguageState = null;
          
          function initializeGlobalLanguage() {
            if (window.globalLanguageState) {
              globalLanguageState = window.globalLanguageState;
            }
          }

          // Language filtering utilities (client-side)
          function getLanguageFromUrl() {
            // Use immediate language detection if available (prevents flickering)
            if (window.immediateLanguage) {
              return window.immediateLanguage;
            }
            
            // Use global state if available
            if (globalLanguageState) {
              return globalLanguageState.getCurrentLanguage();
            }
            
            // Fallback to URL parameter detection
            const urlParams = new URLSearchParams(window.location.search);
            const langParam = urlParams.get('lang');
            return langParam === 'en' ? 'en' : 'zh';
          }

          function getArticleLanguage(articleId, posts) {
            if (articleId.startsWith('en/')) return 'en';
            if (articleId.startsWith('zh/')) return 'zh';
            
            // This shouldn't happen in the new structure, but default to Chinese
            return 'zh';
          }

          function filterPostsByLanguage(posts, language) {
            return posts.filter(post => {
              const articleLang = getArticleLanguage(post.id, posts);
              return articleLang === language;
            });
          }

          function updateAllPosts() {
             const currentLanguage = getLanguageFromUrl();
             
             // Update html lang attribute
             document.documentElement.lang = currentLanguage;
             
             const filteredPosts = filterPostsByLanguage(allPosts, currentLanguage);
             
             // Update the title
             const enText = document.querySelector('#all-posts-title .en-text');
             const zhText = document.querySelector('#all-posts-title .zh-text');
             if (enText && zhText) {
               if (currentLanguage === 'en') {
                 enText.style.display = 'inline';
                 zhText.style.display = 'none';
               } else {
                 enText.style.display = 'none';
                 zhText.style.display = 'inline';
               }
             }
             const titleElement = document.getElementById('all-posts-info');
             if (titleElement) {
               titleElement.textContent = `(${currentLanguage === 'en' ? 'English' : '中文'} - ${filteredPosts.length} posts)`;
             }
            
            // Update the post list
            const listElement = document.getElementById('all-posts-list');
            if (listElement) {
              const allListItems = listElement.querySelectorAll('li[data-post-id]');
              
              // Hide all posts first
              allListItems.forEach(item => {
                item.style.display = 'none';
              });
              
              // Show only filtered posts
              filteredPosts.forEach(post => {
                const postElement = listElement.querySelector(`li[data-post-id="${post.id}"]`);
                if (postElement) {
                  postElement.style.display = 'block';
                }
              });
            }
            
            // Remove loading class if posts are filtered
            const postsElement = document.querySelector('.posts');
            if (postsElement) {
              postsElement.classList.remove('loading');
            }
          }

          function initialize() {
            initializeGlobalLanguage();
            updateAllPosts();
          }

          // Update on page load
          document.addEventListener('DOMContentLoaded', initialize);
          
          // Update when URL changes (for SPA navigation)
          window.addEventListener('popstate', updateAllPosts);
          
          // Listen to language change events from the toggle component
          window.addEventListener('languageChanged', updateAllPosts);
          window.addEventListener('globalLanguageChanged', updateAllPosts);
          
          // Also update immediately if DOM is already ready
          if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initialize);
          } else {
            initialize();
          }
        </script>
      </section>
      
      <!-- Load global language state module -->
      <script>
        import { globalLanguageState, initializeGlobalLanguageState } from "$utils/globalLanguageState";
        
        // Make global state available to inline scripts
        window.globalLanguageState = globalLanguageState;
        
        // Initialize global language state
        initializeGlobalLanguageState();
      </script>
    </main>
    <Footer />
  </body>
</html>
