---
import { getCollection } from "astro:content";
import { TagList } from "@myriaddreamin/tylant";
import { Search } from "@myriaddreamin/tylant";
import BaseHead from "$components/BaseHead.astro";
import Footer from "$components/Footer.astro";
import FormattedDate from "$components/FormattedDate.astro";
import Header from "$components/Header.astro";
import { kUrlBase, kSiteTitle, kSiteDescription, kEnableSearch } from "$consts";
import "$styles/IndexPostList.css";

const allPosts = (await getCollection("blog")).sort(
  (a, b) => b.data.date.valueOf() - a.data.date.valueOf()
);
---

<!doctype html>
<html lang="zh">
  <head>
    <BaseHead title={kSiteTitle} description={kSiteDescription} />
    <style>
      .posts.loading {
        display: none;
      }
      main.search-enabled {
        padding-top: 0;
      }
      @media (max-width: 600px) {
        .heading {
          display: flex;
          flex-direction: column;
        }
      }
    </style>
  </head>
  <body>
    <Header />
    {kEnableSearch && <Search />}
    <main class={kEnableSearch ? "search-enabled" : ""}>
      <section>
        <h2 style="margin-bottom: 1rem; font-size: 2rem;" id="all-posts-title">
          <span class="en-text" style="display: none;">All Posts</span>
          <span class="zh-text" style="display: none;">全部文章</span>
        </h2>
        <ul class={`accent block-list posts${kEnableSearch ? " loading" : ""}`} id="all-posts-list">
          {
            allPosts.map((post) => (
              <li
                data-post-id={post.id}
                style="display: none;"
              >
                <a class="heading" href={`${kUrlBase}/article/${post.id}/`}>
                  <h2>
                    <span class="title">{post.data.title}</span>
                  </h2>
                  <span class="date">
                    <FormattedDate date={post.data.date} />
                  </span>
                </a>
                {post.data.tags && <TagList tags={post.data.tags} />}
                {post.data.description || ""}
              </li>
            ))
          }
        </ul>
        
        <script is:inline define:vars={{allPosts}}>
          function getLanguageFromUrl() {
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.get('lang') === 'en' ? 'en' : 'zh';
          }

          function getArticleLanguage(articleId) {
            if (articleId.startsWith('en/')) return 'en';
            if (articleId.startsWith('zh/')) return 'zh';
            return 'zh'; // Default
          }

          function filterPostsByLanguage(posts, language) {
            return posts.filter(post => {
              const articleLang = getArticleLanguage(post.id);
              return articleLang === language;
            });
          }

          function updateAllPosts() {
            const currentLanguage = getLanguageFromUrl();
            document.documentElement.lang = currentLanguage;

            const filteredPosts = filterPostsByLanguage(allPosts, currentLanguage);
            
            const enText = document.querySelector('#all-posts-title .en-text');
            const zhText = document.querySelector('#all-posts-title .zh-text');
            if (enText && zhText) {
              enText.style.display = currentLanguage === 'en' ? 'inline' : 'none';
              zhText.style.display = currentLanguage === 'zh' ? 'inline' : 'none';
            }
            
            const listElement = document.getElementById('all-posts-list');
            if (listElement) {
              const allListItems = listElement.querySelectorAll('li[data-post-id]');
              const filteredIds = new Set(filteredPosts.map(p => p.id));
              
              allListItems.forEach(item => {
                const postId = item.getAttribute('data-post-id');
                item.style.display = filteredIds.has(postId) ? 'block' : 'none';
              });
            }
            
            const postsElement = document.querySelector('.posts');
            if (postsElement) {
              postsElement.classList.remove('loading');
            }
          }

          function initialize() {
            updateAllPosts();
            document.addEventListener('astro:page-load', updateAllPosts);
          }

          if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initialize);
          } else {
            initialize();
          }
        </script>
      </section>
    </main>
    <Footer />
  </body>
</html>
