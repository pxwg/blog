---
import { render } from "astro:content";
import { type CollectionEntry, getCollection } from "astro:content";
import { execSync } from "node:child_process";

import BlogPost from "$layouts/BlogPost.astro";
interface Props {
  lang: string;
  slug: string[];
}
import { getGitModifiedDate } from "../../../utils/git";

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  return posts.map((post) => {
    const [lang, ...slugParts] = post.id.split('/');
    const slug = slugParts.join('/');

    // Construct the correct path to the source file
    const filePath = `content/article/${post.id}.typ`;
    post.data.modifiedDate = getGitModifiedDate(post.id, {
      contentDir: 'content/article',
      fileExtension: '.typ',
      fallbackDate: post.data.date,
      debug: true
    });
    post.data.updatedDate = post.data.modifiedDate;

    return {
      params: {
        lang,
        slug: slug
      },
      props: post,
    };
  });
}

type PostProps = CollectionEntry<"blog">;

const { lang, slug } = Astro.params;
const post = Astro.props as PostProps;
const { Content } = await render(post);
---

<BlogPost {...{ id: post.id }} {...post.data} entry={post}>
  <Content />
  <!-- Back to all article. -->
  <p><a href="../">ðŸ›« Back to all articles</a></p>
</BlogPost>
