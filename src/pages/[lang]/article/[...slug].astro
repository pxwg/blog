---
import { render } from "astro:content";
import { type CollectionEntry, getCollection } from "astro:content";
import { execSync } from "node:child_process";

import BlogPost from "$layouts/BlogPost.astro";
interface Props {
  lang: string;
  slug: string[];
}

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  return posts.map((post) => {
    const [lang, ...slugParts] = post.id.split('/');
    const slug = slugParts.join('/');

    // Construct the correct path to the source file
    const filePath = `content/article/${post.id}.typ`;

    try {
      // Get the last commit date and remove any trailing whitespace
      const lastUpdated = execSync(`git log -1 --pretty="format:%cI" -- "${filePath}"`).toString().trim();

      // Only update the date if the command returned a valid string
      if (lastUpdated) {
        post.data.updatedDate = new Date(lastUpdated);
      }
    } catch (e) {
      // If git log fails (e.g., for a new untracked file),
      // we can silently ignore it and the updatedDate will not be set.
    }

    return {
      params: {
        lang,
        slug: slug
      },
      props: post,
    };
  });
}

type PostProps = CollectionEntry<"blog">;

const { lang, slug } = Astro.params;
const post = Astro.props as PostProps;
const { Content } = await render(post);
---

<BlogPost {...{ id: post.id }} {...post.data} entry={post}>
  <Content />
</BlogPost>
