---
import { render, getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";

import BlogPost from "$layouts/BlogPost.astro";
import { getGitModifiedDate } from "../../../utils/git";
import { buildTranslationMap, findTranslation } from "../../../utils/translation";

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  const translationMap = await buildTranslationMap(posts);

  return posts.map((post) => {
    const [lang, ...slugParts] = post.id.split('/');
    const slug = slugParts.join('/');

    post.data.modifiedDate = getGitModifiedDate(post.id, {
      contentDir: 'content/article',
      fileExtension: '.typ',
      fallbackDate: post.data.date,
      debug: true
    });
    post.data.updatedDate = post.data.modifiedDate;

    return {
      params: { lang, slug },
      props: { post, translationMap },
    };
  });
}

type Props = {
  post: CollectionEntry<'blog'>;
  translationMap: Record<string, { en?: CollectionEntry<'blog'>; zh?: CollectionEntry<'blog'> }>;
};
const { post, translationMap } = Astro.props;
const { lang: urlLang } = Astro.params;

// Use frontmatter language as single source of truth
const { lang: postLang, translationKey } = post.data;

// Find translation using pre-built translation map
let translationUrl: string | undefined = undefined;
if (translationKey) {
  const translatedPost = findTranslation(translationMap, translationKey, postLang);

  if (translatedPost) {
    translationUrl = `/${translatedPost.id.replace('/', '/article/')}/`;
  }
}

const { Content } = await render(post);
---

<BlogPost
  {...post.data}
  id={post.id}
  slug={post.slug}
  translationUrl={translationUrl}>
  <Content />
  <p><a href="../">ðŸ›« Back to all articles</a></p>
</BlogPost>
