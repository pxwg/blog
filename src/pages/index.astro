---
import { getCollection } from "astro:content";
import { TagList } from "@myriaddreamin/tylant";
import BaseHead from "$components/BaseHead.astro";
import Header from "$components/Header.astro";
import Footer from "$components/Footer.astro";
import FormattedDate from "$components/FormattedDate.astro";
import {
  kSiteTitle,
  kSiteIndexTitle,
  kSiteDescription,
  kUrlBase,
  kBaiduVeriCode,
} from "$consts";
// @ts-ignore
import AboutContent from "../../content/other/intro.typ?html&body";
import "$styles/IndexPostList.css";

const allPosts = (await getCollection("blog")).sort(
  (a, b) => b.data.date.valueOf() - a.data.date.valueOf()
);
---

<!doctype html>
<html lang="zh">
  <head>
    <BaseHead title={kSiteTitle} description={kSiteDescription} />
    {
      kBaiduVeriCode && (
        <meta name="baidu-site-verification" content={kBaiduVeriCode} />
      )
    }
    <style>
      .comments a {
        display: inline-block;
      }
      @media (max-width: 600px) {
        .posts .heading {
          display: flex;
          flex-direction: column;
        }
      }
      .comment-item {
        background-color: var(--main-bg-color);
      }
      .monthly li {
        font-style: italic;
      }
    </style>
  </head>
  <body>
    <Header />
    <main>
      <section aria-label="Prelude">
        <h1 set:html={kSiteIndexTitle} />
        <AboutContent />
      </section>
      <section aria-label="Recent Posts">
        <h2 id="recent-posts-title">
          <span class="en-text" style="display: none;">Recent Posts</span>
          <span class="zh-text" style="display: none;">最近文章</span>
        </h2>
        <ul class="accent block-list posts" id="recent-posts-list">
          {
            allPosts.map((post) => {
              const postUrl = post.id.startsWith('en/')
                ? `${kUrlBase}/article/${post.id}/?lang=en`
                : `${kUrlBase}/article/${post.id}/`;
              return (
                <li data-post-id={post.id} style="display: none;">
                  <a class="heading" href={postUrl}>
                    <h2>
                      <span class="title">{post.data.title}</span>
                    </h2>
                    <span class="date">
                      <FormattedDate date={post.data.date} />
                    </span>
                  </a>
                  {post.data.tags && <TagList tags={post.data.tags} />}
                  {post.data.description || ""}
                </li>
              );
            })
          }
        </ul>
      </section>
      
      <script is:inline define:vars={{allPosts}}>
        function getLanguageFromUrl() {
          const urlParams = new URLSearchParams(window.location.search);
          return urlParams.get('lang') === 'en' ? 'en' : 'zh';
        }

        function getArticleLanguage(articleId) {
          if (articleId.startsWith('en/')) return 'en';
          if (articleId.startsWith('zh/')) return 'zh';
          return 'zh'; // Default
        }

        function filterPostsByLanguage(posts, language) {
          return posts.filter(post => {
            const articleLang = getArticleLanguage(post.id);
            return articleLang === language;
          });
        }

        function updateRecentPosts() {
          const currentLanguage = getLanguageFromUrl();
          document.documentElement.lang = currentLanguage;

          const filteredPosts = filterPostsByLanguage(allPosts, currentLanguage);
          const recentPosts = filteredPosts.slice(0, 5);
          
          const enText = document.querySelector('#recent-posts-title .en-text');
          const zhText = document.querySelector('#recent-posts-title .zh-text');
          if (enText && zhText) {
            enText.style.display = currentLanguage === 'en' ? 'inline' : 'none';
            zhText.style.display = currentLanguage === 'zh' ? 'inline' : 'none';
          }
          
          const listElement = document.getElementById('recent-posts-list');
          if (listElement) {
            const allListItems = listElement.querySelectorAll('li[data-post-id]');
            const recentIds = new Set(recentPosts.map(p => p.id));

            allListItems.forEach(item => {
              const postId = item.getAttribute('data-post-id');
              item.style.display = recentIds.has(postId) ? 'block' : 'none';
            });
          }
        }

        function initialize() {
          updateRecentPosts();
          document.addEventListener('astro:page-load', updateRecentPosts);
        }

        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', initialize);
        } else {
          initialize();
        }
      </script>
    </main>
    <Footer />
  </body>
</html>
