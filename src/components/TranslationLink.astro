---
import { getTargetLanguage, getTranslationDisclaimer, getTranslationLinks} from "$utils/i18n";

const { entry, locale, llmTranslated } = Astro.props;

// Extract current slug from URL path
const currentPath = Astro.url.pathname;
// Handle both prefixed (/en/article/slug) and non-prefixed (/article/slug) routes
const currentSlug = currentPath.replace(/^\/(zh|en)?\/article\//, '').replace(/\/$/, '');

// If the slug still contains '/article/', it means we're in the non-prefixed route
// and need to extract the slug differently
const finalSlug = currentSlug.includes('/article/')
  ? currentSlug.replace(/^\/article\//, '')
  : currentSlug;

// Check if this is an LLM-translated article using front matter or direct prop
const isLLMTranslated = entry?.data?.['llm-translated'] === true || llmTranslated === true;

const targetLocale = getTargetLanguage(locale as any);

// Generate target path using Astro's i18n routing
let targetPath = null;
targetPath = `/${targetLocale}/article/${finalSlug}/`;

---
{isLLMTranslated && targetPath && (
  <div class="translation-disclaimer">
    <span set:html={getTranslationDisclaimer(locale as any, targetPath)} />
  </div>
)}

{!isLLMTranslated && targetPath && (
  <div class="translation-disclaimer">
    <span set:html={getTranslationLinks(locale as any, targetPath)} />
  </div>
)}
  

<style>
.translation-disclaimer {
  margin: 0.75em 0;
  padding: 0.75em 0.9em;
  border-left: 3px solid var(--accent);
  background: var(--raw-bg-color);
  border-radius: 6px;
  color: var(--gray-color);
  font-size: 0.9em;
  line-height: 1.35;
}
.translation-note-title {
  color: var(--accent);
  font-weight: 600;
  margin-right: 0.3em;
}
.translation-disclaimer a {
  color: var(--accent);
  text-decoration: underline;
}
.translation-disclaimer a:hover {
  color: var(--accent-dark);
  opacity: 0.9;
}
</style>
