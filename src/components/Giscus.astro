---
const repo = import.meta.env.PUBLIC_GISCUS_REPO;
const repoId = import.meta.env.PUBLIC_GISCUS_REPO_ID;
const category = import.meta.env.PUBLIC_GISCUS_CATEGORY;
const categoryId = import.meta.env.PUBLIC_GISCUS_CATEGORY_ID;

const isGiscusConfigured = repo && repoId && category && categoryId;

function getCurrentLanguage(): 'zh' | 'en' {
  const pathname = Astro.url.pathname;
  if (pathname.startsWith('/zh/')) return 'zh';
  if (pathname.startsWith('/en/')) return 'en';
  return 'en';
}

const currentLang = getCurrentLanguage();

const giscusLangMap = {
  'zh': 'zh-CN',
  'en': 'en'
};

const giscusLang = giscusLangMap[currentLang];

const giscusThemeUrl = 'https://pxwg-dogggie.github.io/blog/giscus-theme.css';
---

{isGiscusConfigured ? (
  <div id="giscus-container" class="giscus mt-8 pt-8 border-t border-gray-200 dark:border-gray-700">
    <style is:global>
      .giscus, .giscus-frame { width: 100%; }
      .giscus-frame { border-radius: 8px; }
    </style>
    <script
      src="https://giscus.app/client.js"
      data-repo={repo}
      data-repo-id={repoId}
      data-category={category}
      data-category-id={categoryId}
      data-mapping="pathname"
      data-strict="0"
      data-reactions-enabled="1"
      data-emit-metadata="0"
      data-input-position="top"
      data-theme={giscusThemeUrl}
      data-lang={giscusLang}
      data-loading="lazy"
      crossorigin="anonymous"
      async
    >
    </script>
  </div>
) : (
  <div class="mt-8 pt-8 border-t border-gray-200 dark:border-gray-700 text-center text-gray-500 dark:text-gray-400">
    <p>{currentLang === 'zh' ? '评论功能暂未配置。' : 'Comment feature is not configured.'}</p>
  </div>
)}

{isGiscusConfigured && (
  <script is:inline>
    function setGiscusTheme(theme) {
      const giscusFrame = document.querySelector('iframe.giscus-frame');
      if (giscusFrame && giscusFrame.contentWindow) {
        giscusFrame.contentWindow.postMessage(
          { giscus: { setConfig: { theme: theme } } },
          'https://giscus.app'
        );
      }
    }

    const getTheme = () => document.documentElement.classList.contains('dark') ? 'dark' : 'light';

    function giscusMessageHandler(event) {
        if (event.origin !== 'https://giscus.app') return;
        if (event.data && event.data.giscus) {
            // Giscus has loaded, set the initial theme.
            setGiscusTheme(getTheme());
            // We only need to do this once, so remove the listener.
            window.removeEventListener('message', giscusMessageHandler);
        }
    }
    window.addEventListener('message', giscusMessageHandler);

    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.attributeName === 'class') {
          setGiscusTheme(getTheme());
        }
      });
    });

    observer.observe(document.documentElement, {
      attributes: true,
    });
  </script>
)}
