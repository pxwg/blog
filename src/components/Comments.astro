---
export interface Props {
  owner: string;
  repo: string;
  title: string;
}

const { owner, repo, title } = Astro.props;
---

<div id="comments-container" data-owner={owner} data-repo={repo} data-title={title}>
  <div class="comment-loader">
    <div class="spinner"></div>
    <p>Loading comments...</p>
  </div>
</div>

<script>
  const getCookie = (name) => {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) return parts.pop().split(';').shift();
  }
  // Helper function to create DOM elements safely
  const createEl = (tag, attrs = {}, children = []) => {
    const el = document.createElement(tag);
    for (const key in attrs) {
      el.setAttribute(key, attrs[key]);
    }
    for (const child of children) {
      if (typeof child === 'string') {
        el.appendChild(document.createTextNode(child));
      } else {
        el.appendChild(child);
      }
    }
    return el;
  };

  const renderComments = async () => {
    const commentsContainer = document.getElementById('comments-container');
    if (!commentsContainer) return;

    const { owner, repo, title } = commentsContainer.dataset;
    const accessToken = getCookie('github_token');
    // Debug html output

    if (!accessToken) {
      commentsContainer.innerHTML = `<p>Please <a class="login-link" href="/api/auth/login">login with GitHub</a> to view and post comments.</p>`;
      return;
    }

    try {
      // Use the confirmed production URL
      const apiUrl = `https://command-proxy.vercel.app/api/find_discussion?owner=${owner}&repo=${repo}&title=${encodeURIComponent(title)}`;
      
      console.log("Requesting API:", apiUrl);

      const response = await fetch(apiUrl, {
        headers: {
          'Authorization': `Bearer ${accessToken}`
        }
      });

      console.log("Received response:", response);

      if (!response.ok) {
        if (response.status === 404) {
          commentsContainer.innerHTML = `<p>No discussion found for this article. Be the first to <a class="create-link" href="https://github.com/${owner}/${repo}/discussions/new" target="_blank" rel="noopener noreferrer">create one</a>!</p>`;
        } else {
          // Try to get a more specific error message from the API
          const errorData = await response.json().catch(() => ({ error: `API request failed with status: ${response.status}` }));
          throw new Error(errorData.error || `API request failed`);
        }
        return;
      }

      const discussionData = await response.json();
      console.log("Received discussion data:", discussionData);

      // Validate the response structure
      if (!discussionData || !discussionData.title) {
        throw new Error("Invalid response format from API");
      }

      // Clear the loading indicator
      commentsContainer.innerHTML = '';

      // Render discussion title and body
      const titleEl = createEl('h2');
      titleEl.textContent = discussionData.title;
      
      const bodyEl = createEl('div', { class: 'discussion-body' });
      bodyEl.innerHTML = discussionData.bodyHTML || ''; // GitHub's HTML is sanitized
      
      const separator = createEl('hr');
      const commentsTitle = createEl('h3');
      commentsTitle.textContent = 'Comments';

      commentsContainer.append(titleEl, bodyEl, separator, commentsTitle);

      // Render comments
      if (!discussionData.comments || !discussionData.comments.nodes || discussionData.comments.nodes.length === 0) {
        const noComments = createEl('p');
        noComments.textContent = 'Be the first to comment.';
        commentsContainer.append(noComments);
      } else {
        discussionData.comments.nodes.forEach(comment => {
          const authorImg = createEl('img', {
            src: comment.author.avatarUrl,
            alt: comment.author.login,
            width: '40',
            height: '40'
          });
          
          const authorName = createEl('strong');
          authorName.textContent = comment.author.login;
          
          const commentDate = createEl('span', { class: 'comment-date' });
          commentDate.textContent = `on ${new Date(comment.createdAt).toLocaleString()}`;
          
          const headerDiv = createEl('div', { class: 'comment-header' });
          headerDiv.appendChild(authorImg);
          headerDiv.appendChild(authorName);
          headerDiv.appendChild(commentDate);
          
          const bodyDiv = createEl('div', { class: 'comment-body' });
          bodyDiv.innerHTML = comment.bodyHTML || ''; // GitHub's HTML is sanitized

          const commentDiv = createEl('div', { class: 'comment' });
          commentDiv.appendChild(headerDiv);
          commentDiv.appendChild(bodyDiv);
          
          commentsContainer.append(commentDiv);
        });
      }

      // Add a link to view on GitHub
      const viewOnGitHub = createEl('p', { class: 'view-on-github' });
      const gitHubLink = createEl('a', {
        href: discussionData.url || `https://github.com/${owner}/${repo}/discussions`,
        target: '_blank',
        rel: 'noopener noreferrer',
        class: 'github-link'
      });
      gitHubLink.textContent = 'View on GitHub â†’';
      viewOnGitHub.appendChild(gitHubLink);
      commentsContainer.append(viewOnGitHub);

    } catch (error) {
      console.error("Failed to load comments:", error);
      commentsContainer.innerHTML = `<div class="error-box"><p>Sorry, we couldn't load the comments.</p><p class="error-message">Details: ${error.message}</p></div>`;
    }
  };

  // Listen for Astro's page load event for SPA-like navigation
  document.addEventListener('astro:page-load', renderComments);
</script>

<style>
  #comments-container {
    margin-top: 2rem;
    font-size: 1rem;
  }
  .discussion-body, .comment-body {
    line-height: 1.7;
  }
  .discussion-body img, .comment-body img {
    max-width: 100%;
    border-radius: 8px;
  }
  .comment {
    border: 1px solid #e1e4e8;
    padding: 1rem 1.2rem;
    margin-bottom: 1rem;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.05);
  }
  .comment-header {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 0.75rem;
    padding-bottom: 0.75rem;
    border-bottom: 1px solid #f0f2f5;
  }
  .comment-header img {
    border-radius: 50%;
  }
  .comment-header strong {
    font-size: 1.05em;
  }
  .comment-date {
    color: #586069;
    font-size: 0.9em;
    margin-left: auto;
  }
  .login-link, .create-link, .github-link {
    font-weight: bold;
    color: var(--accent);
    text-decoration: none;
  }
  .login-link:hover, .create-link:hover, .github-link:hover {
    text-decoration: underline;
  }
  .view-on-github {
    margin-top: 1.5rem;
    text-align: center;
    padding-top: 1rem;
    border-top: 1px solid #e1e4e8;
  }
  .error-box {
    background-color: #ffebee;
    border: 1px solid #f44336;
    color: #b71c1c;
    padding: 1rem;
    border-radius: 8px;
  }
  .error-message {
    font-family: monospace;
    font-size: 0.9em;
    word-break: break-all;
  }

  /* Loading Spinner */
  .comment-loader {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 1rem;
    padding: 2rem;
    color: #586069;
  }
  .spinner {
    border: 4px solid #f3f3f3;
    border-top: 4px solid var(--accent, #3498db);
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite;
  }
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
</style>
