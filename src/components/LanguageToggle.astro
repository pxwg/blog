---
import fs from 'fs';
import path from 'path';
import { getListingLanguageUrls, getCurrentLanguage } from '../utils/languageFilter';
import * as config from "astro:env/client";

interface Props {
  articleId?: string;
}

const { articleId } = Astro.props;

// Helper function to get language toggle links
function getLanguageLinks(currentUrl: string, articleId?: string) {
  const url = new URL(currentUrl);
  const pathname = url.pathname;

  // Check if we're on an article page
  const articleMatch = pathname.match(/^\/article\/(.+?)\/?$/);

  if (!articleMatch) {
    // Not on an article page (Home, Posts, etc.), use listing page language URLs
    const listingUrls = getListingLanguageUrls(url);
    return listingUrls;
  }

  // Article page logic - NEW SIMPLIFIED STRUCTURE
  let articlePath = articleMatch[1];
  let currentLang: 'zh' | 'en' = 'zh';
  let baseArticle = articlePath;

  // Determine current language and base article name
  if (articlePath.startsWith('en/')) {
    currentLang = 'en';
    baseArticle = articlePath.replace(/^en\//, '');
  } else if (articlePath.startsWith('zh/')) {
    currentLang = 'zh';
    baseArticle = articlePath.replace(/^zh\//, '');
  } else {
    currentLang = 'zh';
    baseArticle = articlePath;
  }

  // Check file existence for both language versions
  const projectRoot = process.cwd();
  const zhPath = path.join(projectRoot, 'content/article/zh', `${baseArticle}.typ`);
  const enPath = path.join(projectRoot, 'content/article/en', `${baseArticle}.typ`);
  
  const zhExists = fs.existsSync(zhPath);
  const enExists = fs.existsSync(enPath);

  let zhLink, enLink;
  
  // For Chinese: always use /article/zh/xxx/ if it exists
  if (zhExists) {
    zhLink = `/article/zh/${baseArticle}/`;
  } else {
    zhLink = null;
  }
  
  // For English: always use /article/en/xxx/ with ?lang=en if it exists
  if (enExists) {
    enLink = `/article/en/${baseArticle}/?lang=en`;
  } else {
    enLink = null;
  }
  
  return {
    zh: zhLink,
    en: enLink,
    current: currentLang
  };
}

const links = getLanguageLinks(Astro.url.href, articleId);
---

<div class="language-toggle" data-current-lang={links.current}>
  <button 
    class:list={["lang-link", { active: links.current === 'zh', disabled: !links.zh }]}
    title={links.zh ? "切换到中文" : "中文版本不存在"}
    aria-label={links.zh ? "Switch to Chinese" : "Chinese version not available"}
    data-lang="zh"
    data-target-url={links.zh || ''}
  >
    中文
  </button>
  <span class="separator" aria-hidden="true">|</span>
  <button 
    class:list={["lang-link", { active: links.current === 'en', disabled: !links.en }]}
    title={links.en ? "Switch to English" : "English version not available"}
    aria-label={links.en ? "Switch to English" : "English version not available"}
    data-lang="en"
    data-target-url={links.en || ''}
  >
    EN
  </button>
</div>

<script>
  function setupLanguageToggle() {
    const buttons = document.querySelectorAll('.lang-link');
    
    buttons.forEach((button) => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        const targetLang = button.getAttribute('data-lang');
        const targetUrl = button.getAttribute('data-target-url');
        
        if (button.classList.contains('disabled') || !targetUrl) {
          return;
        }
        
        // Save preference
        try {
          localStorage.setItem('preferredLanguage', targetLang);
        } catch (error) {
        }
        
        window.location.href = targetUrl;
      });
    });
  }
  
  // Setup on load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setupLanguageToggle);
  } else {
    setupLanguageToggle();
  }
  
  // Re-setup on page transitions
  document.addEventListener('astro:page-load', setupLanguageToggle);
</script>

<style>
  .language-toggle {
    display: flex;
    align-items: center;
    gap: 0.5em;
    font-size: 0.9em;
    position: relative;
    z-index: 10;
    right: 9px;
  }
  
  .lang-link {
    color: var(--gray-color);
    text-decoration: none;
    padding: 0.25em 0.5em;
    border-radius: 3px;
    transition: color 0.2s, background-color 0.2s, border-bottom 0.2s;
    font-weight: 300;
    border-bottom: 2px solid transparent;
    background: none;
    border: none;
    cursor: pointer;
    font-family: inherit;
    font-size: inherit;
  }
  
  .lang-link:hover {
    color: var(--main-hover-color);
    background-color: var(--accent-bg-color, rgba(128, 128, 128, 0.1));
  }
  
  .lang-link.active {
    color: var(--accent);
    font-weight: 400;
    border-bottom-color: var(--accent);
    text-decoration: underline;
  }
  
  .lang-link.disabled {
    color: var(--gray-color);
    opacity: 0.4;
    cursor: not-allowed;
    text-decoration: line-through;
  }
  
  .lang-link.disabled:hover {
    color: var(--gray-color);
    background-color: transparent;
    border-bottom-color: transparent;
  }
  
  .separator {
    color: var(--gray-color);
    opacity: 0.5;
    font-weight: 300;
  }
  
  @media (max-width: 680px) {
    .language-toggle {
      font-size: 0.8em;
      gap: 0.4em;
    }
    
    .lang-link {
      padding: 0.2em 0.4em;
    }
  }
  
  @media (max-width: 400px) {
    .language-toggle {
      font-size: 0.75em;
    }
  }
</style>
