---
import fs from 'fs';
import path from 'path';
// Note: The following two imports are not used in the final logic
// but are kept to avoid breaking other parts of the codebase if they are used elsewhere.
import { getListingLanguageUrls, getCurrentLanguage } from '../utils/languageFilter';
import * as config from "astro:env/client";

interface Props {
  articleId?: string;
}

const { articleId } = Astro.props;

// A robust helper to get language toggle links and current state
function getLanguageLinks(currentUrl: string) {
  const url = new URL(currentUrl);
  const pathname = url.pathname;
  const searchParams = url.searchParams;

  // --- Logic for Article Pages ---
  const articleMatch = pathname.match(/\/article\/(en|zh)\/([^/]+)/);
  if (articleMatch) {
    const langInPath = articleMatch[1] as 'en' | 'zh';
    const baseSlug = articleMatch[2];
    
    return {
      zh: `/article/zh/${baseSlug}/`,
      en: `/article/en/${baseSlug}/?lang=en`,
      current: langInPath,
    };
  }

  // --- Logic for Listing Pages (e.g., /, /article/) ---
  const currentLang = searchParams.get('lang') === 'en' ? 'en' : 'zh';

  const enParams = new URLSearchParams(searchParams);
  enParams.set('lang', 'en');
  const enLink = `${pathname}?${enParams.toString()}`;

  const zhParams = new URLSearchParams(searchParams);
  zhParams.delete('lang');
  const zhQuery = zhParams.toString();
  const zhLink = zhQuery ? `${pathname}?${zhQuery}` : pathname;

  return {
    zh: zhLink || '/', 
    en: enLink,
    current: currentLang,
  };
}

const links = getLanguageLinks(Astro.url.href);
---

<div class="language-toggle" data-current-lang={links.current}>
  <a 
    href={links.zh}
    class:list={["lang-link", { active: links.current === 'zh' }]}
    title="切换到中文"
    aria-label="Switch to Chinese"
    data-lang="zh"
  >
    中文
  </a>
  <span class="separator" aria-hidden="true">|</span>
  <a 
    href={links.en}
    class:list={["lang-link", { active: links.current === 'en' }]}
    title="Switch to English"
    aria-label="Switch to English"
    data-lang="en"
  >
    EN
  </a>
</div>

<script>
  // --- FINAL CLIENT-SIDE SCRIPT ---

  /**
   * This is the core function. It reads the current URL and updates the
   * highlight class on the language links to match.
   */
  function updateHighlight() {
    const url = new URL(window.location.href);
    let currentLang = 'zh'; // Default to Chinese

    // For article pages, language is in the path
    const articleMatch = url.pathname.match(/\/article\/(en|zh)\//);
    if (articleMatch) {
      currentLang = articleMatch[1];
    } else {
      // For all other pages, language is in the '?lang' param
      currentLang = url.searchParams.get('lang') === 'en' ? 'en' : 'zh';
    }

    const zhLink = document.querySelector('.language-toggle a[data-lang="zh"]');
    const enLink = document.querySelector('.language-toggle a[data-lang="en"]');

    if (zhLink && enLink) {
      if (currentLang === 'en') {
        enLink.classList.add('active');
        zhLink.classList.remove('active');
      } else {
        zhLink.classList.add('active');
        enLink.classList.remove('active');
      }
    }
  }

  /**
   * Saves the chosen language to localStorage for future visits.
   * This is for persistence, not for immediate UI updates.
   */
  function setLanguagePreference(event) {
    const target = event.currentTarget;
    const lang = target.dataset.lang;
    if (lang) {
      try {
        localStorage.setItem('preferredLanguage', lang);
      } catch (e) {
        // Fails silently in private browsing.
      }
    }
  }

  /**
   * Attaches click listeners to the language links.
   */
  function attachClickListeners() {
    document.querySelectorAll('.language-toggle a.lang-link').forEach(link => {
      link.removeEventListener('click', setLanguagePreference); // Avoid duplicates
      link.addEventListener('click', setLanguagePreference);
    });
  }

  // --- Main Execution ---

  // 1. Run immediately when the script is parsed on initial load.
  updateHighlight();
  attachClickListeners();

  // 2. Add a listener for Astro's client-side navigation event.
  // This is the key to fixing the highlight issue on page changes.
  document.addEventListener('astro:page-load', () => {
    updateHighlight();
    attachClickListeners(); // Re-attach listeners in case the component was re-rendered
  });
</script>


<style>
  .language-toggle {
    display: flex;
    align-items: center;
    gap: 0.5em;
    font-size: 0.9em;
    position: relative;
    z-index: 10;
    right: 9px;
  }
  
  .lang-link {
    color: var(--gray-color);
    text-decoration: none;
    padding: 0.25em 0.5em;
    border-radius: 3px;
    transition: color 0.2s, background-color 0.2s, border-bottom 0.2s;
    font-weight: 300;
    border-bottom: 2px solid transparent;
    background: none;
    border: none;
    cursor: pointer;
    font-family: inherit;
    font-size: inherit;
  }
  
  .lang-link:hover {
    color: var(--main-hover-color);
    background-color: var(--accent-bg-color, rgba(128, 128, 128, 0.1));
  }
  
  .lang-link.active {
    color: var(--accent);
    font-weight: 400;
    border-bottom-color: var(--accent);
    text-decoration: underline;
  }
  
  .lang-link.disabled {
    color: var(--gray-color);
    opacity: 0.4;
    cursor: not-allowed;
    text-decoration: line-through;
  }
  
  .lang-link.disabled:hover {
    color: var(--gray-color);
    background-color: transparent;
    border-bottom-color: transparent;
  }
  
  .separator {
    color: var(--gray-color);
    opacity: 0.5;
    font-weight: 300;
  }
  
  @media (max-width: 680px) {
    .language-toggle {
      font-size: 0.8em;
      gap: 0.4em;
    }
    
    .lang-link {
      padding: 0.2em 0.4em;
    }
  }
  
  @media (max-width: 400px) {
    .language-toggle {
      font-size: 0.75em;
    }
  }
</style>
