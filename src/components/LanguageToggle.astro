---
import fs from 'fs';
import path from 'path';
import { getListingLanguageUrls, getLanguageFromUrl } from '../utils/languageFilter';

interface Props {
  articleId?: string;
}

const { articleId } = Astro.props;

// Helper function to get language toggle links
function getLanguageLinks(currentUrl: string, articleId?: string) {
  const url = new URL(currentUrl);
  const pathname = url.pathname;

  // Check if we're on an article page
  const articleMatch = pathname.match(/^\/blog\/article\/(.+?)\/?$/);

  if (!articleMatch) {
    // Not on an article page (Home, Posts, etc.), use listing page language URLs
    const listingUrls = getListingLanguageUrls(url);
    return listingUrls;
  }

  // Article page logic - follow user's exact requirements
  let articlePath = articleMatch[1];
  let currentLang: 'zh' | 'en' = 'zh';
  let baseArticle = articlePath;

  // Determine current language and base article name
  if (articlePath.startsWith('en/')) {
    currentLang = 'en';
    baseArticle = articlePath.replace(/^en\//, '');
  } else if (articlePath.startsWith('zh/')) {
    currentLang = 'zh';
    baseArticle = articlePath.replace(/^zh\//, '');
  } else {
    // No language prefix - this is a base article (Chinese by default)
    currentLang = 'zh';
    baseArticle = articlePath;
  }

  let zhLink, enLink;

  // Apply user's exact requirements:
  if (articlePath.startsWith('en/')) {
    // Rule: /blog/article/en/xxx/ → /blog/article/xxx/ (remove /en/ when switching to Chinese)
    zhLink = `/blog/article/${baseArticle}/`;
    enLink = `/blog/article/en/${baseArticle}/`;
  } else if (articlePath.startsWith('zh/')) {
    // Rule: /blog/article/zh/xxx/ → /blog/article/xxx/ (remove /zh/ when switching to English)
    zhLink = `/blog/article/zh/${baseArticle}/`;
    enLink = `/blog/article/${baseArticle}/`;
  } else {
    // Rule: /blog/article/xxx/ → generate /en/xxx/ or /zh/xxx/ based on file existence
    const projectRoot = process.cwd();
    const zhPath = path.join(projectRoot, 'content/article/zh', `${baseArticle}.typ`);
    const enPath = path.join(projectRoot, 'content/article/en', `${baseArticle}.typ`);
    
    const zhExists = fs.existsSync(zhPath);
    const enExists = fs.existsSync(enPath);

    // Base article links
    zhLink = `/blog/article/${baseArticle}/`;
    enLink = `/blog/article/${baseArticle}/`;

    // Add language-specific links if translations exist
    if (zhExists) {
      zhLink = `/blog/article/zh/${baseArticle}/`;
    }
    if (enExists) {
      enLink = `/blog/article/en/${baseArticle}/`;
    }
  }

  return {
    zh: zhLink,
    en: enLink,
    current: currentLang
  };
}

const links = getLanguageLinks(Astro.url.href, articleId);
---

<div class="language-toggle">
  <a 
    href={links.zh} 
    class:list={["lang-link", { active: links.current === 'zh' }]}
    title="切换到中文"
    aria-label="Switch to Chinese"
    data-lang="zh"
  >
    中文
  </a>
  <span class="separator" aria-hidden="true">|</span>
  <a 
    href={links.en} 
    class:list={["lang-link", { active: links.current === 'en' }]}
    title="Switch to English"
    aria-label="Switch to English"
    data-lang="en"
  >
    EN
  </a>
</div>

<!-- Client-side language toggle updates -->
<script is:inline>
  function getCurrentLanguageFromPath() {
    const path = window.location.pathname;
    const search = window.location.search;
    
    // Check for URL parameter (used on listing pages like Home and Posts)
    const urlParams = new URLSearchParams(search);
    const langParam = urlParams.get('lang');
    if (langParam === 'en') return 'en';
    
    // Check for path-based language (used on individual blog posts)
    // Pattern: /blog/article/en/xxx/ or /blog/article/zh/xxx/
    const articleMatch = path.match(/\/blog\/article\/(en|zh)\/[^\/]+\/?$/);
    if (articleMatch) {
      return articleMatch[1];
    }
    
    // Default to Chinese
    return 'zh';
  }

  function updateLanguageToggle() {
    const currentLang = getCurrentLanguageFromPath();
    
    // Update active states
    document.querySelectorAll('.lang-link').forEach(link => {
      const linkLang = link.getAttribute('data-lang');
      if (linkLang === currentLang) {
        link.classList.add('active');
      } else {
        link.classList.remove('active');
      }
    });
    
    // Trigger custom event for other components to listen to
    window.dispatchEvent(new CustomEvent('languageChanged', { detail: { language: currentLang } }));
  }

  // Update on page load and URL changes
  document.addEventListener('DOMContentLoaded', updateLanguageToggle);
  window.addEventListener('popstate', updateLanguageToggle);
  
  // Update immediately if DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', updateLanguageToggle);
  } else {
    updateLanguageToggle();
  }
</script>

<style>
  .language-toggle {
    display: flex;
    align-items: center;
    gap: 0.5em;
    font-size: 0.9em;
  }
  
  .lang-link {
    color: var(--gray-color);
    text-decoration: none;
    padding: 0.25em 0.5em;
    border-radius: 3px;
    transition: color 0.2s, background-color 0.2s, border-bottom 0.2s;
    font-weight: 500;
    border-bottom: 2px solid transparent;
  }
  
  .lang-link:hover {
    color: var(--main-hover-color);
    background-color: var(--accent-bg-color, rgba(128, 128, 128, 0.1));
    border-bottom-color: var(--main-hover-color);
  }
  
  .lang-link.active {
    color: var(--accent);
    font-weight: 600;
    background-color: var(--accent-bg-color, rgba(207, 130, 158, 0.15));
    border-bottom-color: var(--accent);
    text-shadow: 0 0 2px var(--accent);
  }
  
  .separator {
    color: var(--gray-color);
    opacity: 0.5;
    font-weight: 300;
  }
  
  @media (max-width: 680px) {
    .language-toggle {
      font-size: 0.8em;
      gap: 0.4em;
    }
    
    .lang-link {
      padding: 0.2em 0.4em;
    }
  }
  
  @media (max-width: 400px) {
    .language-toggle {
      font-size: 0.75em;
    }
  }
</style>
