---
import * as config from "astro:env/client";

interface Props {
  articleId?: string;
}

const { articleId } = Astro.props;

function getLanguageLinks(currentUrl: string) {
  const url = new URL(currentUrl);
  const pathname = url.pathname;
  const searchParams = url.searchParams;
  
  const currentLang = searchParams.get('lang') === 'cn' ? 'cn' : 'en';

  const articleMatch = pathname.match(/\/article\/(en|zh)\/([^/]+)/);
  if (articleMatch) {
    const baseSlug = articleMatch[2];
    return {
      cn: `/article/zh/${baseSlug}/?lang=cn`,
      en: `/article/en/${baseSlug}/`,
      current: currentLang,
    };
  }

  const cnParams = new URLSearchParams(searchParams);
  cnParams.set('lang', 'cn');
  const cnLink = `${pathname}?${cnParams.toString()}`;

  const enParams = new URLSearchParams(searchParams);
  enParams.delete('lang');
  const enQuery = enParams.toString();
  const enLink = enQuery ? `${pathname}?${enQuery}` : pathname;

  return {
    cn: cnLink,
    en: enLink || '/',
    current: currentLang,
  };
}

const links = getLanguageLinks(Astro.url.href);
---

<div class="language-toggle">
  <a 
    href={links.cn}
    class="lang-link"
    title="切换到中文"
    aria-label="Switch to Chinese"
    data-lang="cn"
  >
    中文
  </a>
  <span class="separator" aria-hidden="true">|</span>
  <a 
    href={links.en}
    class="lang-link"
    title="Switch to English"
    aria-label="Switch to English"
    data-lang="en"
  >
    EN
  </a>
</div>

<script>
  /**
   * This script now has only two simple jobs:
   * 1. After a page transition, update the global <html> lang attribute.
   * 2. Save the user's preference to localStorage on click.
   */
  function updateGlobalLangState() {
    const isChinese = new URL(window.location.href).searchParams.get('lang') === 'cn';
    document.documentElement.setAttribute('lang', isChinese ? 'zh' : 'en');
  }

  function setLanguagePreference(event) {
    const target = event.currentTarget;
    const lang = target.dataset.lang;
    if (lang) {
      try {
        localStorage.setItem('preferredLanguage', lang);
      } catch (e) {
        // Fails silently.
      }
    }
  }

  function attachClickListeners() {
    document.querySelectorAll('.language-toggle a.lang-link').forEach(link => {
      link.removeEventListener('click', setLanguagePreference); // Prevent duplicates
      link.addEventListener('click', setLanguagePreference);
    });
  }

  // Use 'astro:after-swap' to update the global state before the next paint.
  document.addEventListener('astro:after-swap', updateGlobalLangState);

  // Attach listeners on initial load.
  document.addEventListener('DOMContentLoaded', attachClickListeners);
  // Re-attach after transitions.
  document.addEventListener('astro:page-load', attachClickListeners);
</script>

<style>
  .language-toggle {
    display: flex;
    align-items: center;
    gap: 0.5em;
    font-size: 0.9em;
    position: relative;
    z-index: 10;
    right: 9px;
  }
  
  .lang-link {
    color: var(--gray-color);
    text-decoration: none;
    padding: 0.25em .5em;
    border-radius: 3px;
    transition: color .2s, background-color .2s, border-bottom .2s;
    font-weight: 300;
    border-bottom: 2px solid transparent;
    background: none;
    border: none;
    cursor: pointer;
    font-family: inherit;
    font-size: inherit;
  }
  
  .lang-link:hover {
    color: var(--main-hover-color);
  }
  
  html[lang="zh"] .language-toggle .lang-link[data-lang="cn"],
  /* When the html tag has lang="en", highlight the English link. */
  html[lang="en"] .language-toggle .lang-link[data-lang="en"] {
    color: var(--accent);
    font-weight: 400;
    border-bottom-color: var(--accent);
    text-decoration: underline;
  }
  
  .separator {
    color: var(--gray-color);
    opacity: 0.5;
    font-weight: 300;
  }
</style>
