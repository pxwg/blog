name: blog::gh_pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
  # At 0 minutes past the hour, every 6 hours
  schedule:
    - cron: "0 */3 * * *"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  pages: write
  id-token: write
  contents: read
  discussions: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-gh-pages:
    runs-on: ubuntu-latest
    env:
      TYPST_FONT_PATHS: assets/fonts
      TYPST_FONT_PATH: assets/fonts
      BLOG_FONT_DIR: assets/fonts
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10
          run_install: false
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
      - name: Download Fonts
        run: |
          mkdir -p ./assets/fonts
          curl -L https://github.com/Myriad-Dreamin/shiroa/releases/download/v0.1.5/source-han-serif-font-assets.tar.gz | tar -xvz -C assets/fonts
          curl -L https://raw.githubusercontent.com/stipub/stixfonts/master/zipfiles/static_otf.zip -o assets/fonts/static_otf.zip
          unzip -o -j assets/fonts/static_otf.zip -d assets/fonts
          rm assets/fonts/static_otf.zip
          ls ./assets/fonts

      - run: pnpm install
      # - name: Pull Data from Backend (Optional)
      #   run: pnpm run pull-data
      - run: pnpm build:deploy

      - name: Create Discussions for New Posts
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          node <<'EOF'
          const fs = require('fs');
          const path = require('path');
          const { execSync } = require('child_process');

          // Helper: parse meta from HTML (example: <meta name="translationKey" content="xxx">)
          function parseMeta(content, name) {
            const match = content.match(new RegExp(`<meta[^>]+name=["']${name}["'][^>]+content=["']([^"']+)["']`, 'i'));
            return match ? match[1] : null;
          }

          function parseTitle(content) {
            // Try <meta name="title" ...>
            let title = parseMeta(content, 'title');
            if (title) return title;
            // Fallback to <title>...</title>
            const match = content.match(/<title>([^<]+)<\/title>/i);
            return match ? match[1] : null;
          }

          function findHtmlFiles(dir) {
            let files = [];
            for (const entry of fs.readdirSync(dir, { withFileTypes: true })) {
              const fullPath = path.join(dir, entry.name);
              if (entry.isDirectory()) files = files.concat(findHtmlFiles(fullPath));
              else if (entry.isFile() && entry.name.endsWith('.html')) files.push(fullPath);
            }
            return files;
          }

          async function main() {
            const processedKeys = new Set();
            const htmlFiles = findHtmlFiles(path.join(process.cwd(), 'dist'));
            for (const filePath of htmlFiles) {
              const content = fs.readFileSync(filePath, 'utf8');
              const translationKey = parseMeta(content, 'translationKey');
              const title = parseTitle(content) || path.basename(filePath);

              if (!translationKey || processedKeys.has(translationKey)) continue;
              processedKeys.add(translationKey);

              const discussionBody = `<p>Comment section for the article: <strong>${title}</strong>.</p>
                <p>Read the article here: <a href="https://homeward-sky.top/article/${translationKey}">${title}</a></p>`;

              // Check if discussion exists (customize search as needed)
              const searchQuery = `repo:${process.env.REPO_OWNER}/${process.env.REPO_NAME} in:body "${translationKey}"`;
              const searchCommand = `gh api graphql -f query='
                query($q: String!) { search(query: $q, type: DISCUSSION, first: 1) { nodeCount } }' -f q="${searchQuery}" --jq '.data.search.nodeCount'`;
              const result = execSync(searchCommand, { encoding: 'utf8' }).trim();
              if (parseInt(result, 10) > 0) continue;

              // Get repo/category IDs
              const repoDataCommand = `gh api graphql -f query='
                query {
                  repository(owner: "${process.env.REPO_OWNER}", name: "${process.env.REPO_NAME}") {
                    id
                    discussionCategories(first: 10, name: "General") {
                      nodes { id }
                    }
                  }
                }'`;
              const repoData = JSON.parse(execSync(repoDataCommand, { encoding: 'utf8' }));
              const repositoryId = repoData.data.repository.id;
              const categoryId = repoData.data.repository.discussionCategories.nodes[0]?.id;
              if (!categoryId) process.exit(1);

              // Create discussion
              const createCommand = `gh api graphql -f query='
                mutation($repoId: ID!, $catId: ID!, $title: String!, $body: String!) {
                  createDiscussion(input: {repositoryId: $repoId, categoryId: $catId, title: $title, body: $body}) {
                    discussion { url }
                  }
                }' -f repoId='${repositoryId}' -f catId='${categoryId}' -f title='Comment section for: ${title}' -f body='${discussionBody}'`;
              try { execSync(createCommand); } catch (e) { }
            }
          }
          main();
          EOF

      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./dist"
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
