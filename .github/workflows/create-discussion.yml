name: Create Discussion for New Posts

on:
  push:
    branches:
      - main

jobs:
  create_discussion:
    runs-on: ubuntu-latest
    permissions:
      discussions: write
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Find new posts and create discussions
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          # Use a Node.js script for the main logic
          node <<'EOF'
          const fs = require('fs');
          const path = require('path');
          const { execSync } = require('child_process');

          // Helper function to parse frontmatter from a file.
          function parseFrontmatter(content) {
            const match = content.match(/---\s*([\s\S]*?)\s*---/);
            if (!match) return {};
            const frontmatter = {};
            match[1].split('\n').forEach(line => {
              const parts = line.split(':');
              if (parts.length > 1) {
                const key = parts[0].trim();
                const value = parts.slice(1).join(':').trim().replace(/['"]/g, '');
                frontmatter[key] = value;
              }
            });
            return frontmatter;
          }

          // Recursively find all files in a directory.
          function findArticleFiles(dir) {
            let files = [];
            const entries = fs.readdirSync(dir, { withFileTypes: true });
            for (const entry of entries) {
              const fullPath = path.join(dir, entry.name);
              if (entry.isDirectory()) {
                files = files.concat(findArticleFiles(fullPath));
              } else if (entry.isFile()) {
                files.push(fullPath);
              }
            }
            return files;
          }

          async function main() {
            // Use a Set to process each translationKey only once.
            const processedKeys = new Set();
            const articleDir = path.join(process.cwd(), 'src', 'content', 'blog');
            const allFiles = findArticleFiles(articleDir);
            
            for (const filePath of allFiles) {
              const content = fs.readFileSync(filePath, 'utf8');
              const { title, translationKey } = parseFrontmatter(content);

              if (!title || !translationKey) {
                console.log(`Skipping ${path.basename(filePath)}: missing title or translationKey.`);
                continue;
              }

              // If this key has been processed, skip it.
              if (processedKeys.has(translationKey)) {
                console.log(`Skipping duplicate translationKey: ${translationKey}`);
                continue;
              }
              processedKeys.add(translationKey);

              console.log(`Processing "${title}" with key: ${translationKey}`);

              const discussionBody = `
                <p>Comment section for the article: <strong>${title}</strong>.</p>
                <p>Read the article here:</p>
                <ul>
                  <li><a href="https://homeward-sky.top/en/article/${translationKey}">English Version</a></li>
                  <li><a href="https://homeward-sky.top/zh/article/${translationKey}">Chinese Version</a></li>
                </ul>
                `;

              // 1. Check if a discussion already exists.
              const searchQuery = `repo:${process.env.REPO_OWNER}/${process.env.REPO_NAME} in:body ""`;
              const searchCommand = `gh api graphql -f query='
                query($q: String!) { search(query: $q, type: DISCUSSION, first: 1) { nodeCount } }' -f q="${searchQuery}" --jq '.data.search.nodeCount'`;
              
              const result = execSync(searchCommand, { encoding: 'utf8' }).trim();
              
              if (parseInt(result, 10) > 0) {
                console.log(`Discussion for key "${translationKey}" already exists. Skipping.`);
                continue;
              }

              // 2. If it doesn't exist, create a new one.
              console.log(`Creating new discussion for "${title}"...`);
              
              const repoDataCommand = `gh api graphql -f query='
                query {
                  repository(owner: "${process.env.REPO_OWNER}", name: "${process.env.REPO_NAME}") {
                    id
                    discussionCategories(first: 10, name: "General") {
                      nodes { id }
                    }
                  }
                }'`;
              
              const repoData = JSON.parse(execSync(repoDataCommand, { encoding: 'utf8' }));
              const repositoryId = repoData.data.repository.id;
              const categoryId = repoData.data.repository.discussionCategories.nodes[0]?.id;

              if (!categoryId) {
                console.error("Error: Could not find the 'General' discussion category.");
                process.exit(1);
              }
              
              const createCommand = `gh api graphql -f query='
                mutation($repoId: ID!, $catId: ID!, $title: String!, $body: String!) {
                  createDiscussion(input: {repositoryId: $repoId, categoryId: $catId, title: $title, body: $body}) {
                    discussion { url }
                  }
                }' -f repoId='${repositoryId}' -f catId='${categoryId}' -f title='Comment section for: ${title}' -f body='${discussionBody}'`;

              try {
                execSync(createCommand);
                console.log(`Successfully created discussion for "${title}".`);
              } catch (error) {
                console.error(`Failed to create discussion for "${title}":`, error.toString());
              }
            }
          }

          main();
          EOF
